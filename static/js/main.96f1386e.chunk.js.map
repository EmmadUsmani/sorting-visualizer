{"version":3,"sources":["ItemList/Item.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/quickSort.js","ItemList/index.js","components/Canvas.js","components/App.js","index.js"],"names":["Item","value","index","x","y","width","height","numItems","this","color","calculateColor","marked","window","innerWidth","innerHeight","degPerItem","mergeSort","mergeSortHelper","merge","list","length","l","r","m","Math","floor","start","mid","end","start2","mark","unmark","item","update","insertionSort","i","j","selectionSort","min","unmarkAll","heapSort","heapify","n","temp","largest","quickSort","quickSortHelper","partition","low","high","p","pivot","ItemList","input","generateList","isSorting","push","random","algo","console","error","toggleSorting","Array","Canvas","state","items","canvasRef","React","createRef","resizeCanvas","current","forEach","drawItems","shuffleItems","shuffle","sortItems","props","sortHelper","sorter","selectedAlgo","next","setTimeout","speed","addEventListener","shuffleRef","onclick","sortRef","setState","prevProps","removeEventListener","context","getContext","clearRect","fillStyle","strokeStyle","fillRect","strokeRect","ref","Component","App","algorithms","setAlgo","e","target","setSpeed","setNumItems","Card","raised","className","CardContent","Typography","href","fontSize","FormControl","disabled","Select","onChange","map","a","MenuItem","key","Slider","valueLabelDisplay","max","CardActions","Button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96f1386e.chunk.js","sourcesContent":["class Item {\n    constructor(value, index, x, y, width, height, numItems) {\n        this.value = value;\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.numItems = numItems;\n        this.color = this.calculateColor();\n        this.marked = false;\n    }\n\n    update(index) {\n        const width = window.innerWidth / this.numItems;\n        const height = window.innerHeight / this.numItems * (this.value+1);\n        this.index = index;\n        this.x = index *  width;\n        this.y = window.innerHeight - height;\n        this.width = width;\n        this.height = height;\n    }\n\n    calculateColor() {\n        const degPerItem = 360 / this.numItems;\n        return `hsl(${degPerItem * this.value}, 65%, 55%)`;\n    }\n\n    mark() {\n        this.marked = true;\n    }\n\n    unmark() {\n        this.marked = false;\n    }\n    \n}\n\nexport default Item;","// In-place merge sort, adapted from https://www.geeksforgeeks.org/in-place-merge-sort/\nfunction* mergeSort(list) {\n    yield* mergeSortHelper(list, 0, list.length - 1)\n}\n\nfunction* mergeSortHelper(list, l, r) {\n    if(l < r) {\n        const m = Math.floor(l + (r - l) / 2);\n        yield* mergeSortHelper(list, l, m);\n        yield* mergeSortHelper(list, m + 1, r);\n        yield* merge(list, l, m, r);\n    }\n}\n\nfunction* merge(list, start, mid, end) {\n    let start2 = mid + 1;\n    // Marking comparison\n    list.mark(mid);\n    list.mark(start2);\n    yield;\n    list.unmark(mid);\n    list.unmark(start2);\n    // If merge is already sorted, end alg\n    if (list[mid].value > list[start2].value) {\n        while (start <= mid && start2 <= end) {\n            // Marking comparison\n            list.mark(start);\n            list.mark(start2);\n            yield;\n            list.unmark(start);\n            list.unmark(start2);\n            // If element in first list is in correct spot\n            if (list[start].value <= list[start2].value) {\n                start++;\n            } else {\n                // Shift elements in first list right, put element in second behind\n                let item = list[start2];\n                let index = start2;\n                while(index !== start) {\n                    list[index] = list[index - 1];\n                    list[index].update(index);\n                    index--;\n                }\n                list[start] = item;\n                list[start].update(start);\n\n                // Increment pointers\n                start++;\n                mid++;\n                start2++;\n            }\n        }\n    }\n}\n\nexport default mergeSort;","function* insertionSort(list) {\n    // Iterate through every item back in list\n    for (let i = 1; i < list.length; i++) {\n        let item = list[i];\n        let j = i;\n        // Marking comparison\n        list.mark(j);\n        list.mark(j - 1);\n        yield;\n        list.unmark(j);\n        list.unmark(j - 1);\n        // Swap item back until items behind it are smaller\n        while(j > 0 && item.value < list[j - 1].value) {\n            list[j] = list[j-1];\n            list[j - 1] = item;\n            list[j].update(j);\n            list[j - 1].update(j - 1);\n            j--;\n            if(j > 0) {\n                // Marking comparison\n                list.mark(j);\n                list.mark(j - 1);\n                yield;\n                list.unmark(j);\n                list.unmark(j - 1);\n            }\n        }\n    }\n}\n\nexport default insertionSort;","function* selectionSort(list) {\n    // Iterate through entire list\n    for (let i = 0; i < list.length; i++) {\n        let min = list[i];\n        // Find min in unsorted portion of list\n        for (let j = i + 1; j < list.length; j++) {\n            // Marking comparison\n            list.mark(min.index);\n            list.mark(j);\n            yield;\n            list.unmarkAll();\n            if (list[j].value < min.value) {\n                min = list[j];\n            }\n        }\n        // Swap min into sorted portion\n        list[min.index] = list[i];\n        list[min.index].update(min.index);\n        list[i] = min;\n        min.update(i);\n    }\n}\n\nexport default selectionSort;","// Adapted from https://www.geeksforgeeks.org/heap-sort/\nfunction* heapSort(list) {\n    let n = list.length;\n    // Max-heapify list\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--)\n        yield* heapify(list, n, i);\n    // Move max to end of list\n    for (let i = n - 1; i >= 0; i--) {\n        let temp = list[0];\n        list[0] = list[i];\n        list[0].update(0);\n        list[i] = temp;\n        list[i].update(i);\n        // Heapify unsorted portion\n        yield* heapify(list, i, 0);\n    }\n}\n\n// Heapify subtree rooted at index i of size n\nfunction* heapify(list, n, i) {\n    let largest = i;\n    let l = 2 * i + 1; // index of left child\n    let r = 2 * i + 2; // index of right child\n\n    if (l < n) {\n        // Marking comparison\n        list.mark(l);\n        list.mark(largest);\n        yield;\n        list.unmarkAll();\n        if (list[l].value > list[largest].value)\n            largest = l;\n    }\n\n    if (r < n) {\n        // Marking comparison\n        list.mark(r);\n        list.mark(largest);\n        yield;\n        list.unmarkAll();\n        if (list[r].value > list[largest].value)\n            largest = r;\n    }\n    \n    // Swap largest into root\n    if (largest !== i) {\n        let temp = list[i];\n        list[i] = list[largest];\n        list[i].update(i);\n        list[largest] = temp;\n        list[largest].update(largest);\n        // Heapify affected subtree\n        yield* heapify(list, n, largest);\n    }\n}\n\nexport default heapSort;","// Adapted from https://www.geeksforgeeks.org/quick-sort/\nfunction* quickSort(list) {\n    yield* quickSortHelper(list, 0, list.length-1);\n}\n\nfunction* quickSortHelper(list, low, high) {\n    if (low < high) {\n        let p = {value: 0}; // p = pivot index after partition\n        yield* partition(list, low, high, p);\n        // Quick Sort left and right elems\n        yield* quickSortHelper(list, low, p.value - 1);\n        yield* quickSortHelper(list, p.value + 1, high);\n    }\n}\n\nfunction* partition(list, low, high, p) {\n    let pivot = list[high]; // Partition on right-most item\n    let i = low - 1; // Pointer for last elem less than pivot\n    // Moving smaller elems to left of list\n    for (let j = low; j < high; j++) {\n        // Marking comparison\n        list.mark(j);\n        list.mark(pivot.index);\n        yield;\n        list.unmarkAll();\n        if (list[j].value < pivot.value) {\n            i++;\n            // Swap list[j] to end of the smaller elems\n            let temp = list[i];\n            list[i] = list[j];\n            list[i].update(i);\n            list[j] = temp;\n            list[j].update(j);\n        }\n    }\n    // Swap pivot after smaller elems\n    let temp = list[i + 1];\n    list[i + 1] = list[high];\n    list[i + 1].update(i + 1);\n    list[high] = temp;\n    list[high].update(high);\n    // Setting pivot index\n    p.value = i + 1;\n} \n\nexport default quickSort;","import Item from './Item'\nimport mergeSort from '../sortingAlgorithms/mergeSort';\nimport insertionSort from '../sortingAlgorithms/insertionSort';\nimport selectionSort from '../sortingAlgorithms/selectionSort';\nimport heapSort from '../sortingAlgorithms/heapSort';\nimport quickSort from '../sortingAlgorithms/quickSort';\n\nclass ItemList extends Array {\n    constructor(input) {\n        super();\n        this.generateList(input);\n        this.isSorting = false;\n        this.marked = {};\n    }\n\n    generateList(numItems) {\n        const width = window.innerWidth / numItems;\n        for (let i = 0; i < numItems; i++) {\n            const height = window.innerHeight / numItems * (i + 1);\n            this.push(new Item(i, i, i * width, window.innerHeight - height, width, height, numItems));\n        }\n    }\n\n    mark(index) {\n        this[index].mark();\n        this.marked[index] = this[index];\n    }\n\n    unmark(index) {\n        this[index].unmark();\n        delete this.marked[index];\n    }\n\n    unmarkAll() {\n        for (const index in this.marked) {\n            this[index].unmark();\n        }\n        this.marked = {};\n    }\n\n    // modern Fisher-Yates algorithm, adapted from https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n    shuffle() {\n        let i, j, temp;\n        for (i = this.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = this[i];\n            this[i] = this[j];\n            this[j] = temp;\n        }\n        for (i = 0; i < this.length; i++) {\n            this[i].update(i);\n            this[i].unmark();\n        }\n    }\n\n    *sorter(algo) {\n        switch (algo) {\n            case 'Merge Sort':\n                yield* mergeSort(this);\n                break;\n            case 'Insertion Sort':\n                yield* insertionSort(this);\n                break;\n            case 'Selection Sort':\n                yield* selectionSort(this);\n                break;\n            case 'Heap Sort':\n                yield* heapSort(this);\n                break;\n            case 'Quick Sort':\n                yield* quickSort(this);\n                break;\n            default:\n                console.error(`${algo} is not a valid sorting algorithm.`);\n        }        \n        this.toggleSorting();\n    }\n\n    toggleSorting() {\n        this.isSorting = !this.isSorting;\n    }\n}\n\nexport default ItemList;","import React from 'react';\nimport ItemList from '../ItemList';\nimport '../css/Canvas.css'\n\nclass Canvas extends React.Component {\n    state = {\n        items: null\n    }\n\n    canvasRef = React.createRef();\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.resizeCanvas);\n        this.props.shuffleRef.current.onclick = this.shuffleItems;\n        this.props.sortRef.current.onclick = this.sortItems;\n        this.setState({items: new ItemList(this.props.numItems)}, this.drawItems);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.numItems !== this.props.numItems)\n            this.setState({items: new ItemList(this.props.numItems)}, this.drawItems);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.resizeCanvas);\n    }\n\n    resizeCanvas = () => {\n        this.canvasRef.current.width = window.innerWidth;\n        this.canvasRef.current.height = window.innerHeight;\n        this.state.items.forEach((item) => {item.update(item.index)});\n        this.drawItems();\n    }\n\n    shuffleItems = () => {\n        this.state.items.shuffle();\n        this.drawItems();\n    }\n\n    sortItems = () => {\n        if (!this.state.items.isSorting) {\n            this.state.items.unmarkAll();\n        }\n        this.props.toggleSorting();\n        this.state.items.toggleSorting();\n        this.sortHelper(this.state.items.sorter(this.props.selectedAlgo));\n    }\n\n    sortHelper = (sorter) => {\n        if(this.state.items.isSorting) {\n            sorter.next();\n            this.drawItems();\n            setTimeout(this.sortHelper, 1000 / this.props.speed, sorter);\n        } else {\n            this.props.toggleSorting();\n        }\n    }\n\n    drawItems() {\n        const context = this.canvasRef.current.getContext('2d');\n        context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        this.state.items.forEach((item) => {\n            if(item.marked) {\n                context.fillStyle = 'white';\n                context.strokeStyle = 'black';\n                context.fillRect(item.x, item.y, item.width, item.height);\n                context.strokeRect(item.x, item.y, item.width, item.height);\n            } else {\n                context.fillStyle = item.color;\n                context.fillRect(item.x, item.y, item.width, item.height);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <canvas \n            ref={this.canvasRef} \n            width={window.innerWidth} \n            height={window.innerHeight}/>\n        );\n    }\n}\n\nexport default Canvas;","import React from 'react';\nimport Canvas from './Canvas.js'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Slider from '@material-ui/core/Slider';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport '../css/App.css'\n\nclass App extends React.Component {\n  state = {\n    algorithms: [\"Merge Sort\", \"Quick Sort\", \"Insertion Sort\", \"Selection Sort\", \"Heap Sort\"],\n    selectedAlgo: \"Merge Sort\",\n    speed: 100,\n    numItems: 100,\n    isSorting: false\n  }\n\n  shuffleRef = React.createRef();\n  sortRef = React.createRef();\n\n  setAlgo = (e) => {\n    this.setState({selectedAlgo: e.target.value});\n  }\n\n  setSpeed = (e, value) => {\n    this.setState({speed: value});\n  }\n\n  setNumItems = (e, value) => {\n    this.setState({numItems: value});\n  }\n\n  toggleSorting = () => {\n    this.setState({isSorting: !this.state.isSorting});\n  }\n\n  render() {\n    return (\n        <>\n        <Card raised={true} className=\"card\">\n    \n          <CardContent>\n            <Typography>Algorithm\n              <a href=\"https://github.com/EmmadUsmani/sorting-visualizer\">\n                <GitHubIcon className=\"github\" color=\"action\" fontSize=\"small\"></GitHubIcon>\n              </a>\n            </Typography>\n            <FormControl className=\"dropdown\" disabled={this.state.isSorting}>\n              <Select value={this.state.selectedAlgo} onChange={this.setAlgo}>\n                  {this.state.algorithms.map((a) => <MenuItem value={a} key={a}>{a}</MenuItem>)}\n              </Select>\n            </FormControl>\n            <Typography>Speed</Typography>\n            <Slider value={this.state.speed} onChange={this.setSpeed} min={1} valueLabelDisplay=\"auto\"/>\n            <Typography>Items</Typography>\n            <Slider value={this.state.numItems} onChange={this.setNumItems} disabled={this.state.isSorting} min={5} max={200} valueLabelDisplay=\"auto\"/>\n          </CardContent>\n          <CardActions className=\"actions\">\n            <div className=\"buttons\">\n              { this.state.isSorting\n                ? <Button color=\"secondary\" ref={this.sortRef}>Stop</Button>\n                : <Button color=\"primary\" ref={this.sortRef}>Sort</Button>\n              }\n              <Button color=\"primary\" ref={this.shuffleRef} disabled={this.state.isSorting}>Shuffle</Button>\n            </div>\n          </CardActions>\n        </Card>\n        <Canvas \n          selectedAlgo={this.state.selectedAlgo}\n          speed={this.state.speed}\n          numItems={this.state.numItems}\n          shuffleRef={this.shuffleRef}\n          sortRef={this.sortRef}\n          toggleSorting={this.toggleSorting}/>\n        </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}